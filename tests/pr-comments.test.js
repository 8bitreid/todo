const {gimmeRobot} = require('./helpers')
const payloads = require('./fixtures/payloads')
const w = any => Promise.resolve({ data: any })
const branch = w([{ head: { ref: 'branch' }, number: 10 }])

const jason = {
  user: { login: 'JasonEtco', type: 'User' },
  body: 'hey'
}

const bot = body => ({
  user: { login: 'todo-dev[bot]', type: 'Bot' },
  body
})

const comment = {
  body: `## Jason!\n\nhttps://github.com/JasonEtco/test/blob/f7d286aa6381bbb5045288496403d9427b0746e2/index.js#L3-L8\n\n---\n\n###### This comment was generated by [todo](https://todo.jasonet.co) based on a \`@todo\` comment in f7d286aa6381bbb5045288496403d9427b0746e2 in #10. cc @JasonEtco.\n\n<!-- probot = {"10000":{"title":"Jason!","file":"index.js","author":"JasonEtco","sha":"f7d286aa6381bbb5045288496403d9427b0746e2"}} -->`,
  number: 10,
  owner: 'JasonEtco',
  repo: 'test'
}

describe('pr comments', () => {
  it('comments on a pull request', async () => {
    const {robot, github} = gimmeRobot()
    github.pullRequests.getAll.mockReturnValue(branch)
    github.issues.getComments.mockReturnValueOnce(w([jason]))

    await robot.receive(payloads.pr)
    expect(github.issues.create).toHaveBeenCalledTimes(0)
    expect(github.issues.createComment).toHaveBeenCalledTimes(1)
    expect(github.issues.createComment).toHaveBeenCalledWith(comment)
  })

  it('comments on a pull request with multiple keywords', async () => {
    const {robot, github} = gimmeRobot('multipleKeywords.yml')
    github.pullRequests.getAll.mockReturnValue(branch)
    github.issues.getComments.mockReturnValueOnce(w([jason]))

    await robot.receive({...payloads.pr,
      payload: {
        ...payloads.pr.payload,
        commits: [{
          ...payloads.pr.payload.commits[0],
          modified: ['multiple-keywords.js']
        }]
      }
    })

    expect(github.issues.create).toHaveBeenCalledTimes(0)
    expect(github.issues.createComment).toHaveBeenCalledTimes(2)
  })

  it('comments on a pull request and mentions the assigned user', async () => {
    const {robot, github} = gimmeRobot('autoAssignString.yml')
    github.pullRequests.getAll.mockReturnValue(branch)
    github.issues.getComments.mockReturnValueOnce(w([jason]))

    await robot.receive(payloads.pr)
    expect(github.issues.createComment).toHaveBeenCalledTimes(1)
  })

  it('comments on a pull request and mentions the assigned users', async () => {
    const {robot, github} = gimmeRobot('autoAssignArr.yml')
    github.pullRequests.getAll.mockReturnValue(branch)
    github.issues.getComments.mockReturnValueOnce(w([jason]))

    await robot.receive(payloads.pr)
    expect(github.issues.createComment).toHaveBeenCalledTimes(1)
  })

  it('does not create duplicate comments', async () => {
    const {robot, github} = gimmeRobot()
    github.pullRequests.getAll.mockReturnValue(branch)
    github.issues.getComments.mockReturnValueOnce(w([jason, bot(comment.body)]))

    await robot.receive(payloads.pr)
    expect(github.issues.createComment).toHaveBeenCalledTimes(0)
  })
})
