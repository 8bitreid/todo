const payloads = require('./fixtures/payloads')
const {gimmeRobot} = require('./helpers')
const w = any => Promise.resolve({ data: any })

const jason = {
  user: { login: 'JasonEtco', type: 'User' },
  body: 'hey'
}

const bot = body => ({
  user: { login: 'todo-dev[bot]', type: 'Bot' },
  body
})

const comment = {
  body: `## Jason!\n\nhttps://github.com/JasonEtco/test/blob/f7d286aa6381bbb5045288496403d9427b0746e2/index.js#L3-L8\n\n---\n\n###### This comment was generated by [todo](https://todo.jasonet.co) based on a \`@todo\` comment in f7d286aa6381bbb5045288496403d9427b0746e2 in #10. cc @JasonEtco.\n\n<!-- probot = {"10000":{"title":"Jason!","file":"index.js","author":"JasonEtco","sha":"f7d286aa6381bbb5045288496403d9427b0746e2"}} -->`,
  number: 10,
  owner: 'JasonEtco',
  repo: 'test'
}

describe('merge-handler', () => {
  it('creates issues from todos leftover in a PR', async () => {
    const {robot, github} = gimmeRobot()
    github.issues.getComments.mockReturnValueOnce(w([jason, bot(comment.body)]))

    await robot.receive(payloads.pullRequestMerged)
    expect(github.issues.create).toHaveBeenCalledTimes(1)
  })

  it('throws when the tree is too large', async () => {
    const {robot, github} = gimmeRobot()
    robot.log.error = jest.fn()
    github.gitdata.getTree.mockReturnValueOnce({ truncated: true })
    await robot.receive(payloads.pullRequestMerged)
    expect(robot.log.error).toHaveBeenCalledWith(new Error('Tree was too large for one recursive request.'))
    expect(github.issues.create).toHaveBeenCalledTimes(0)
  })
})
