const generateBlobLink = require('./generate-blob-link')

const stripAt = str => {
  if (str.startsWith('@')) return str.substring(1)
  return str
}
const addAt = str => {
  if (!str.startsWith('@')) return `@${str}`
  return str
}

/**
 * Generates th`e assigned-to part of the footer string
 * @param {boolean|string|string[]} [autoAssign=true] - Auto assign config setting
 * @param {string} author - Commit author
 * @param {number|boolean} author - PR number or false
 * @returns {string}
 */
function generateAssignedTo (autoAssign = true, author, pr) {
  // :TODO: Improve this giant if tree
  if (autoAssign === false) {
    return ''
  } else if (typeof autoAssign === 'string') {
    const assigner = stripAt(autoAssign)
    if (pr) {
      return ` cc @${assigner}.`
    }
    return ` It's been automagically assigned to @${assigner}.`
  } else if (Array.isArray(autoAssign)) {
    const assigners = autoAssign.map(user => addAt(user))
    const str = assigners.reduce((prev, user, i, arr) => {
      if (i + 1 === arr.length) {
        return prev + ` and ${user}`
      } else if (i === 0) {
        return prev + `${user}`
      } else {
        return prev + `, ${user}`
      }
    }, '')

    if (pr) {
      return ` cc @${str}.`
    }
    return ` It's been automagically assigned to ${str}.`
  }

  if (pr) {
    return ` cc @${author}.`
  }
  return ` It's been assigned to @${author} because they committed the code.`
}

/**
 * @typedef config {object}
 * @prop {boolean|string|string[]} [autoAssign=true]
 * @prop {string} [keyword='@todo']
 * @prop {number|boolean} [blobLines=5]
 * @prop {boolean} [caseSensitive=false]
 *
 * Generate a body string for the new issue.
 * @param {object} context - Probot context object
 * @param {config} config - Config object
 * @param {string} title - Issue title
 * @param {string} file - File name
 * @param {string} contents - Contents of the file
 * @param {string} author - Author of the commit
 * @param {string} sha - Commit where this todo was introduced
 * @param {number|false} pr - PR number if applicable
 */
module.exports = function generateBody (context, config, title, file, contents, author, sha, pr) {
  const separator = '\n\n---\n\n'
  const assignedToString = generateAssignedTo(config.autoAssign, author, pr)
  const footer = `###### This ${pr ? 'comment' : 'issue'} was generated by [todo](https://todo.jasonet.co) based on a \`${config.keyword}\` comment in ${sha}${pr ? ` in #${pr}` : ''}.${assignedToString}`

  const re = new RegExp(`${title}\n.*@body (.*)`, 'gim')
  const bodyRegex = re.exec(contents)
  let body = bodyRegex ? bodyRegex[1] + separator : ''

  const blob = config.blobLines ? generateBlobLink(context, file, contents, title, sha, config) + separator : ''

  const meta = `\n\n<!-- probot = ${JSON.stringify({[context.payload.installation.id]: {title, file, author, sha}})} -->`

  if (pr) {
    return `## ${title}\n\n` + body + blob + footer + meta
  }
  return body + blob + footer + meta
}
